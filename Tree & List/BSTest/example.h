////////////////////////////////////////////////////////////////////////////////
// Copyright(C) GreyGrolics 2004
//
// Filename: example.h
// Description: header file for generic linked and binary tree examples
////////////////////////////////////////////////////////////////////////////////

#ifndef _EXAMPLE_H
#define _EXAMPLE_H

////////////////////////////////////////////////////////////////////////////////
// Includes and external references
////////////////////////////////////////////////////////////////////////////////

#include <stdlib.h>
#include "nodes.h"

////////////////////////////////////////////////////////////////////////////////
// Defs
////////////////////////////////////////////////////////////////////////////////

typedef struct
{
    int number;
} Num;

////////////////////////////////////////////////////////////////////////////////
// Code
////////////////////////////////////////////////////////////////////////////////

void CreateNum (void * pThisNode)
{
    ((P_Node)pThisNode)->data = malloc(sizeof(Num));
}

void DelNum (void * pThisNode)
{
    free(((P_Node)pThisNode)->data);
}

int CompNum (void * data1, void * data2)
{
    if (data1 != NULL && data2 != NULL)
    {
        if (((Num *)data1)->number < ((Num *)data2)->number)
            return -1;
        if (((Num *)data1)->number > ((Num *)data2)->number)
            return 1;
        return 0;
    }
     return -2;
}

#endif